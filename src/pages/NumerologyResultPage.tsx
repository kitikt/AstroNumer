import React, { useState, useEffect } from "react";
import { Box, Text, Grid, Button } from "@chakra-ui/react";
import { useNavigate } from "react-router-dom"; // Import useNavigate
import Divider from "@/components/Divider";
import "@/styles/NumerologyResultPage.css";

// Mock API response for Destiny Number 1
const mockApiResponse = {
  StatusCode: 200,
  Success: true,
  Message: "L·∫•y th√¥ng tin s·ªë ƒë·ªãnh m·ªánh 1 th√†nh c√¥ng",
  Data: {
    Number: 1,
    Keyword: "L√£nh ƒë·∫°o",
    Career: "Doanh nh√¢n, nh√† c·∫£i c√°ch, qu·∫£n l√Ω c·∫•p cao, s√°ng l·∫≠p startup",
    Mission: "D·∫´n d·∫Øt, truy·ªÅn c·∫£m h·ª©ng v√† kh∆°i ngu·ªìn s√°ng t·∫°o m·ªõi",
    Traits: "Quy·∫øt ƒëo√°n, c√≥ √Ω ch√≠ m·∫°nh m·∫Ω, ƒë·ªãnh h∆∞·ªõng r√µ r√†ng",
    Lesson: "Tin t∆∞·ªüng v√†o b·∫£n th√¢n, bi·∫øt c√°ch l√£nh ƒë·∫°o kh√¥ng ƒë·ªôc ƒëo√°n",
    Challenges: "C·ª©ng ƒë·∫ßu, √≠ch k·ª∑, ng·∫°i h·ª£p t√°c",
  },
  Errors: [],
  TraceId: "0HND2ADQH5RER:00000001",
  Meta: null,
};

interface NumerologyResult {
  title: string;
  keyword: string;
  fullDescription?: string;
  value: string | number;
  apiEndpoint: string;
}

const NumerologyResultPage = () => {
  const [numerologyData, setNumerologyData] = useState<NumerologyResult[]>([]);
  const [selectedItem, setSelectedItem] = useState<NumerologyResult | null>(
    null
  );
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate(); // Initialize useNavigate
  const [vipAnalysis, setVipAnalysis] = useState<Record<string, string>>({});

  useEffect(() => {
    const storedData = localStorage.getItem("numerologyData");
    if (storedData) {
      const parsedData = JSON.parse(storedData);

      const initialNumerologyData: NumerologyResult[] = [
        {
          title: "S·ªë ƒê∆∞·ªùng ƒê·ªùi (Life Path Number)",
          value: parsedData.LifePathNumber || 0,
          keyword: "",
          apiEndpoint: `/api/v1/numerology/core-numbers/free/${
            parsedData.LifePathNumber || 0
          }`,
        },
        {
          title: "S·ªë ƒê·ªãnh M·ªánh (Destiny Number)",
          value: parsedData.DestinyNumber || 0,
          keyword: "",
          apiEndpoint: `/api/v1/numerology/destiny-numbers/${
            parsedData.DestinyNumber || 0
          }`,
        },
        {
          title: "S·ªë Linh H·ªìn (Soul Urge Number)",
          value: parsedData.SoulUrgeNumber || 0,
          keyword: "",
          apiEndpoint: `/api/v1/numerology/soul-urge-numbers/${
            parsedData.SoulUrgeNumber || 0
          }`,
        },
        {
          title: "S·ªë Nh√¢n C√°ch (Personality Number)",
          value: parsedData.PersonalityNumber || 0,
          keyword: "",
          apiEndpoint: `/api/v1/numerology/core-numbers/free/${
            parsedData.PersonalityNumber || 0
          }`,
        },
        {
          title: "S·ªë Ng√†y Sinh (Birthday Number)",
          value: parsedData.BirthdayNumber || 0,
          keyword: "",
          apiEndpoint: `/api/v1/numerology/birthday-numbers/${
            parsedData.BirthdayNumber || 0
          }`,
        },
        {
          title: "S·ªë Tr∆∞·ªüng Th√†nh (Maturity Number)",
          value: parsedData.MaturityNumber || 0,
          keyword: "",
          apiEndpoint: `/api/v1/numerology/maturity-numbers/${
            parsedData.MaturityNumber || 0
          }`,
        },
      ];

      const fetchKeywords = async () => {
        try {
          const updatedData = await Promise.all(
            initialNumerologyData.map(async (item) => {
              if (!item.apiEndpoint || item.value === "N/A") {
                return { ...item, keyword: "Kh√¥ng c√≥ d·ªØ li·ªáu" };
              }
              try {
                // Simulate API call for Destiny Number 1
                if (
                  item.title === "S·ªë ƒê·ªãnh M·ªánh (Destiny Number)" &&
                  item.value === 1
                ) {
                  return {
                    ...item,
                    keyword: mockApiResponse.Data.Keyword || "Kh√¥ng c√≥ t·ª´ kh√≥a",
                  };
                }
                const response = await fetch(
                  `${import.meta.env.VITE_API_URL}${item.apiEndpoint}`
                );
                if (!response.ok) {
                  throw new Error(`L·ªói HTTP! Tr·∫°ng th√°i: ${response.status}`);
                }
                const result = await response.json();
                if (result.StatusCode === 200 && result.Success) {
                  return {
                    ...item,
                    keyword:
                      result.Data?.keyword ||
                      result.Data?.Keyword ||
                      "Kh√¥ng c√≥ t·ª´ kh√≥a",
                  };
                }
                return { ...item, keyword: "L·ªói khi t·∫£i d·ªØ li·ªáu" };
              } catch (error) {
                console.error(`L·ªói khi l·∫•y t·ª´ kh√≥a cho ${item.title}:`, error);
                return { ...item, keyword: "L·ªói khi t·∫£i d·ªØ li·ªáu" };
              }
            })
          );
          setNumerologyData(updatedData);
        } catch (error) {
          console.error("L·ªói t·ªïng qu√°t khi l·∫•y d·ªØ li·ªáu:", error);
          setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·∫ßn s·ªë h·ªçc. Vui l√≤ng th·ª≠ l·∫°i sau.");
        }
      };

      fetchKeywords();
    }

    const vip = localStorage.getItem("numerologyVipAnalysis");
    if (vip) {
      setVipAnalysis(JSON.parse(vip));
    }
  }, []);

  const handleOpenModal = async (item: NumerologyResult) => {
    if (!item.fullDescription) {
      try {
        if (!item.apiEndpoint || item.value === "N/A") {
          setSelectedItem({
            ...item,
            fullDescription: "Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt",
          });
          return;
        }

        let result;
        // Use mock API response for Destiny Number 1
        if (
          item.title === "S·ªë ƒê·ªãnh M·ªánh (Destiny Number)" &&
          item.value === 1
        ) {
          result = mockApiResponse;
        } else {
          const response = await fetch(
            `${import.meta.env.VITE_API_URL}${item.apiEndpoint}`
          );
          if (!response.ok) {
            throw new Error(`L·ªói HTTP! Tr·∫°ng th√°i: ${response.status}`);
          }
          result = await response.json();
        }

        if (result.StatusCode === 200 && result.Success) {
          let fullDescription = "";

          if (item.title === "S·ªë ƒê·ªãnh M·ªánh (Destiny Number)") {
            const { Mission, Traits, Lesson, Challenges, Career } = result.Data;

            fullDescription = `
üéØ S·ª© m·ªánh: ${Mission}

üß¨ ƒê·∫∑c ƒëi·ªÉm t√≠nh c√°ch: ${Traits}

üìö B√†i h·ªçc cu·ªôc s·ªëng: ${Lesson}

‚ö†Ô∏è Th·ª≠ th√°ch c√° nh√¢n: ${Challenges}

üíº Ngh·ªÅ nghi·ªáp ph√π h·ª£p: ${Career}
  `.trim();
          } else if (item.title === "S·ªë Linh H·ªìn (Soul Urge Number)") {
            const { Description, inner_motivation, Challenges, deep_analysis } =
              result.Data;

            fullDescription = `
üìù M√¥ t·∫£ t·ªïng quan: ${Description}

üíì ƒê·ªông l·ª±c b√™n trong: ${inner_motivation}

‚ö†Ô∏è Th·ª≠ th√°ch n·ªôi t√¢m: ${Challenges}

üîç Ph√¢n t√≠ch chuy√™n s√¢u: ${deep_analysis}
  `.trim();
          } else if (item.title === "S·ªë Ng√†y Sinh (Birthday Number)") {
            const { Description, Challenge } = result.Data;

            fullDescription = `
üìÜ √ù nghƒ©a ng√†y sinh: ${Description}

‚ö†Ô∏è Th·ª≠ th√°ch cu·ªôc ƒë·ªùi: ${Challenge}
  `.trim();
          } else if (item.title === "S·ªë Tr∆∞·ªüng Th√†nh (Maturity Number)") {
            const { Description } = result.Data;

            fullDescription = `
üåü √ù nghƒ©a s·ªë tr∆∞·ªüng th√†nh: ${Description}
  `.trim();
          } else {
            const description = result.Data?.description || "Kh√¥ng c√≥ m√¥ t·∫£";
            const summary =
              result.Data?.free_version?.summary || "Kh√¥ng c√≥ m√¥ t·∫£";
            const highlight =
              result.Data?.free_version?.highlight || "Kh√¥ng c√≥ ƒëi·ªÉm n·ªïi b·∫≠t";
            const strength = result.Data?.strength || "Kh√¥ng c√≥ d·ªØ li·ªáu";
            const weakness = result.Data?.weakness || "Kh√¥ng c√≥ d·ªØ li·ªáu";

            fullDescription = `üìò M√¥ t·∫£: ${description}

üîπ T√≥m t·∫Øt: ${summary}

‚ú® ƒêi·ªÉm n·ªïi b·∫≠t: ${highlight}

üí™ ƒêi·ªÉm m·∫°nh: ${strength}

‚ö†Ô∏è ƒêi·ªÉm y·∫øu: ${weakness}
  `;
          }

          const updatedItem = { ...item, fullDescription };
          setSelectedItem(updatedItem);
          setNumerologyData((prevData) =>
            prevData.map((dataItem) =>
              dataItem.title === item.title ? updatedItem : dataItem
            )
          );
        } else {
          setSelectedItem({
            ...item,
            fullDescription: "L·ªói khi t·∫£i m√¥ t·∫£ chi ti·∫øt",
          });
        }
      } catch (error) {
        console.error(`L·ªói khi l·∫•y m√¥ t·∫£ chi ti·∫øt cho ${item.title}:`, error);
        setSelectedItem({
          ...item,
          fullDescription: "L·ªói khi t·∫£i m√¥ t·∫£ chi ti·∫øt",
        });
      }
    } else {
      setSelectedItem(item);
    }
  };

  // Function to clear localStorage and navigate to form
  const handleRecalculate = () => {
    localStorage.removeItem("numerologyData"); // Clear numerology data
    localStorage.removeItem("userInfo"); // Clear user info
    navigate("/form/numerology"); // Navigate to the form page
  };

  const typeNameMap: Record<string, number> = {
    "S·ªë ƒê∆∞·ªùng ƒê·ªùi (Life Path Number)": 0,
    "S·ªë ƒê·ªãnh M·ªánh (Destiny Number)": 1,
    "S·ªë Linh H·ªìn (Soul Urge Number)": 2,
    "S·ªë Nh√¢n C√°ch (Personality Number)": 3,
    "S·ªë Ng√†y Sinh (Birthday Number)": 4,
    "S·ªë Tr∆∞·ªüng Th√†nh (Maturity Number)": 5,
    Summary: 6,
  };

  return (
    <Box w="full" px={6} py={10} textAlign="center">
      {error && (
        <Text color="red.600" mb={4}>
          {error}
        </Text>
      )}
      <Box mb={12}>
        <Text fontSize="4xl" color="indigo.700">
          K·∫æT QU·∫¢ TH·∫¶N S·ªê H·ªåC
        </Text>
        <Text mt={6} color="white" maxW="2xl" mx="auto">
          ƒê√¢y l√† ph√¢n t√≠ch chuy√™n s√¢u d·ª±a tr√™n th√¥ng tin c√° nh√¢n c·ªßa b·∫°n. M·ªói
          con s·ªë ti·∫øt l·ªô m·ªôt kh√≠a c·∫°nh quan tr·ªçng trong cu·ªôc s·ªëng v√† h√†nh tr√¨nh
          ph√°t tri·ªÉn b·∫£n th√¢n.
        </Text>
      </Box>

      <Divider />

      <Grid
        mt={12}
        templateColumns={{
          base: "1fr",
          sm: "repeat(2, 1fr)",
          lg: "repeat(3, 1fr)",
        }}
        gap={6}
      >
        {numerologyData.map((item, idx) => (
          <Box
            key={idx}
            borderWidth={1}
            borderRadius="2xl"
            p={6}
            shadow="md"
            _hover={{ shadow: "lg" }}
            transition="all 0.3s"
            bg="transparent"
            backdropFilter="blur(20px)"
            color="black"
            textAlign="center"
          >
            <Text fontSize="lg" fontWeight="semibold" color="pink.200" mb={2}>
              {item.title}
            </Text>
            <Text fontSize="3xl" fontWeight="bold" color="purple.300" mb={2}>
              {item.value}
            </Text>
            <Text fontSize="sm" color="red.400">
              {item.keyword}
            </Text>
            <Button
              mt={4}
              variant="link"
              color="white"
              fontSize="sm"
              _hover={{ textDecoration: "underline" }}
              onClick={() => handleOpenModal(item)}
            >
              Nh·∫•n ƒë·ªÉ xem chi ti·∫øt
            </Button>
          </Box>
        ))}
      </Grid>

      {/* Add Recalculate Button */}
      <Box mt={8}>
        <Button colorScheme="teal" size="lg" onClick={handleRecalculate}>
          Tra C·ª©u L·∫°i
        </Button>
      </Box>

      {selectedItem && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h3 className="modal-title">{selectedItem.title}</h3>
            <div className="modal-value-container">
              <p className="modal-value">{selectedItem.value}</p>
            </div>
            <div style={{ display: "flex", gap: 24, justifyContent: "center" }}>
              <div
                style={{
                  flex: 1,
                  borderRight: "1px solid #eee",
                  paddingRight: 16,
                }}
              >
                <h4 style={{ color: "#6366f1", marginBottom: 8 }}>
                  Ph√¢n t√≠ch th∆∞·ªùng
                </h4>
                <p className="modal-description">
                  {selectedItem.fullDescription || "ƒêang t·∫£i..."}
                </p>
              </div>
              {vipAnalysis &&
                typeof typeNameMap[selectedItem.title] !== "undefined" &&
                vipAnalysis[typeNameMap[selectedItem.title]] && (
                  <div style={{ flex: 1, paddingLeft: 16 }}>
                    <h4 style={{ color: "#f59e42", marginBottom: 8 }}>
                      Ph√¢n t√≠ch VIP
                    </h4>
                    <p className="modal-description">
                      {vipAnalysis[typeNameMap[selectedItem.title]]}
                    </p>
                  </div>
                )}
            </div>
            <button
              className="modal-close-button"
              onClick={() => setSelectedItem(null)}
            >
              ƒê√≥ng
            </button>
          </div>
        </div>
      )}
    </Box>
  );
};

export default NumerologyResultPage;
